buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

group = 'juja'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    baseName = "<project name>"
    version = "0.1.0"
}

description = "<project description>"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

import org.gradle.internal.os.OperatingSystem

task buildDocker(type: Docker, dependsOn: build) {
    if(OperatingSystem.current().isLinux()){
        dockerBinary = "sudo docker"
    }
    applicationName = jar.baseName
    dockerfile = file('docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into "${stageDir}/target"
        }
    }
}

test.testLogging {
    events "skipped", "failed"
    exceptionFormat "SHORT"
    showStandardStreams = true
}

test {
    filter{
        includeTestsMatching "ua.com.juja.microservices.<central_package_name>.*"
    }
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }

    compile 'org.springframework.boot:spring-boot-starter-jetty'
    compile 'javax.inject:javax.inject:1'
    compile 'org.projectlombok:lombok:1.16.10'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}